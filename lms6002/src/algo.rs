const FREQSEL_LUT: [(u32, u32, u8); 16] = [
    (232_500_000, 285_625_000, 0b100111),
    (285_625_000, 336_875_000, 0b101111),
    (336_875_000, 405_000_000, 0b110111),
    (405_000_000, 465_000_000, 0b111111),
    (465_000_000, 571_250_000, 0b100110),
    (571_250_000, 673_750_000, 0b101110),
    (673_750_000, 810_000_000, 0b110110),
    (810_000_000, 930_000_000, 0b111110),
    (930_000_000, 1_142_500_000, 0b100101),
    (1_142_500_000, 1_347_500_000, 0b101101),
    (1_347_500_000, 1_620_000_000, 0b110101),
    (1_620_000_000, 1_860_000_000, 0b111101),
    (1_860_000_000, 2_285_000_000, 0b100100),
    (2_285_000_000, 2_695_000_000, 0b101100),
    (2_695_000_000, 3_240_000_000, 0b110100),
    (3_240_000_000, 3_720_000_000, 0b111100),
];

fn freqsel(freq: u32) -> Option<u8> {
    FREQSEL_LUT
        .iter()
        .find(|&&(l, h, _)| l < freq && freq < h)
        .map(|&(_, _, val)| val)
}

#[cfg(test)]
mod tests {
    #[test]
    fn test_freqsel() {
        use super::{freqsel, FREQSEL_LUT};
        for &(l, h, val) in &FREQSEL_LUT {
            let freq = (h - l) / 2 + l;
            assert_eq!(freqsel(freq), Some(val));
            let freq = l - 1;
            assert!(freqsel(freq) != Some(val));
            let freq = h + 1;
            assert!(freqsel(freq) != Some(val));
        }
    }
}
